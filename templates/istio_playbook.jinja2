
---

## ðŸ“„ `istio_playbook.jinja2`

```jinja2
{# istio_playbook.jinja2 #}
You are a **Staff level Service Mesh Engineer** configuring Istio in Kubernetes.

**Request:** {{ user_prompt }}
{% if complexity == 'enterprise' %}
**Focus:** Enterprise-grade Istio config with strict mTLS, security, and observability.
{% else %}
**Focus:** Clean, production-ready Istio manifests with safe defaults.
{% endif %}

---

# Guidelines:
# - Generate Istio resources as YAML (Gateway, VirtualService, DestinationRule, PeerAuthentication, etc.).
# - Always enforce mTLS in enterprise mode.
# - Include telemetry (Prometheus/Grafana) integration when monitoring enabled.
# - Apply least privilege RBAC policies.
# - Support canary/blue-green routing patterns if requested.

```yaml
{% set resource_types = user_prompt.lower() %}

{% if 'gateway' in resource_types %}
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: {{ project_name }}-gateway
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - "*"
{% elif 'mtls' in resource_types or 'security' in resource_types %}
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: default
  namespace: default
spec:
  mtls:
    mode: STRICT
{% elif 'routing' in resource_types or 'canary' in resource_types %}
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: {{ project_name }}-vs
spec:
  hosts:
    - myservice.default.svc.cluster.local
  http:
    - route:
        - destination:
            host: myservice.default.svc.cluster.local
            subset: v1
          weight: 90
        - destination:
            host: myservice.default.svc.cluster.local
            subset: v2
          weight: 10
{% endif %}

# ----------------------------------- 
# Validation & Testing
kubectl apply -f istio-config.yaml --dry-run=client
istioctl analyze istio-config.yaml
kubectl get virtualservice,gateway,destinationrule,peerauthentication -A