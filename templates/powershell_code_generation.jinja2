{# templates/powershell_code_generation.jinja2 #}

You are a **staff-level Engineer** specializing in **PowerShell automation, DevOps scripting, and Windows/Linux cross-platform ops**.  
Focus on production-grade scripts, modular design, and developer happiness.

Prompt: {{ prompt }}
Tool: {{ tool }}

{% if context %}Context: {{ context }}{% endif %}

# ======================================================================
# üî• POWERSHELL GENERATOR THAT HITS DIFFERENT ‚ö°üêö
# Makes engineers think: "Holy shit, this is production-ready automation in seconds."
# ======================================================================


# ======================================================================
# üöÄ Instant Gratification
# ======================================================================

function Auto-Setup {
    param([string]$ProjectName = "{{ name | default('GeneratedApp') }}")
    Write-Host "üì¶ Initializing $ProjectName..."
    if (-not (Test-Path $ProjectName)) {
        New-Item -ItemType Directory -Name $ProjectName | Out-Null
    }
    Set-Location $ProjectName
    New-Item README.md -Force | Out-Null
    Write-Host "‚úÖ Project structure ready!"
}


# ======================================================================
# ‚öôÔ∏è Smart Defaults (API / CLI / Worker Style)
# ======================================================================

{% if "api" in prompt.lower() %}
# ---- Example REST API server with PowerShell + Polaris ----
Import-Module Polaris

$App = New-PolarisServer -Port 8080

New-PolarisRoute -Path "/healthz" -Method GET -ScriptBlock {
    $Response.Send("ok")
}

New-PolarisRoute -Path "/" -Method GET -ScriptBlock {
    $Response.Json(@{ message = "üî• API Running!"; timestamp = (Get-Date).ToString("o") })
}

Start-Polaris -Server $App
{% elif "worker" in prompt.lower() %}
# ---- Background Worker Example ----
while ($true) {
    Write-Host "‚ö° Processing job at $(Get-Date)"
    # TODO: Insert work logic here
    Start-Sleep -Seconds 30
}
{% elif "cli" in prompt.lower() %}
# ---- Simple CLI Tool ----
param(
    [switch]$Hello,
    [string]$Name = "World"
)

if ($Hello) {
    Write-Host "üöÄ Hello $Name!"
} else {
    Write-Host "üñ•Ô∏è Use -Hello or -Name to run commands."
}
{% endif %}


# ======================================================================
# ‚ú® Developer Experience Magic
# ======================================================================

function Success($msg) { Write-Host "‚úÖ $msg" -ForegroundColor Green }
function Warn($msg)    { Write-Host "‚ö†Ô∏è $msg" -ForegroundColor Yellow }
function ErrorOut($msg) { Write-Error "‚ùå $msg"; Exit 1 }

function Show-Progress {
    param($Current, $Total, $Msg)
    $Percent = [math]::Floor(($Current / $Total) * 100)
    $Bar = ("‚ñà" * ($Percent/5)).PadRight(20, "‚ñë")
    Write-Host "`rüöÄ [$Bar] $Percent% $Msg" -NoNewline
}

function Retry-Command {
    param(
        [scriptblock]$Action,
        [int]$Retries = 3
    )
    for ($i = 0; $i -lt $Retries; $i++) {
        try { return & $Action }
        catch {
            if ($i -lt ($Retries - 1)) {
                Warn "Retry $($i+1)/$Retries due to: $_"
                Start-Sleep -Seconds (2 * ($i+1))
            } else { throw }
        }
    }
}


# ======================================================================
# üìù Copy-Paste Ready Patterns
# ======================================================================

{% if "database" in prompt.lower() %}
# ---- SQL Server Connection Example ----
$connectionString = "Server=localhost;Database=AppDb;Integrated Security=True"
$connection = New-Object System.Data.SqlClient.SqlConnection $connectionString
$connection.Open()
Write-Host "üíæ Connected to SQL Server!"
$connection.Close()
{% endif %}

{% if "kubernetes" in prompt.lower() %}
# ---- kubectl wrapper ----
$pods = kubectl get pods -o json | ConvertFrom-Json
Write-Host "üîç Pods count: $($pods.items.Count)"
{% endif %}

{% if "monitoring" in prompt.lower() %}
# ---- Windows Event Log Tail ----
Get-WinEvent -LogName "Application" -MaxEvents 10 | ForEach-Object {
    Write-Host "üìú $($_.TimeCreated) - $($_.Message)"
}
{% endif %}


# ======================================================================
# üé© Professional Polish
# ======================================================================

$Meta = @{
    Version = "1.0.0"
    Author  = "Generated by AI Copilot"
    PSVer   = $PSVersionTable.PSVersion.ToString()
    Time    = (Get-Date).ToString("o")
}

function Show-Banner {
    Write-Host "üî• {{ name | default('GeneratedApp') }} v$($Meta.Version) by $($Meta.Author)"
    Write-Host "PowerShell Version: $($Meta.PSVer)"
    Write-Host "Generated: $($Meta.Time)"
}


# ======================================================================
# üöÄ The Only Thing That Could Make It Even More Fire
# ======================================================================

# üí® One-Liners That Just Work
# jinja2
# mkdir {{ name | default('App') }}; cd {{ name | default('App') }}; `
#   New-Item main.ps1; Write-Host "üöÄ Ready to run {{ name | default('App') }}"


# ======================================================================
# ‚úÖ Bottom Line
# ======================================================================
# Generate PowerShell scripts that make engineers think:
# - "This bootstraps automation instantly" (instant gratification)
# - "It knows whether I‚Äôm building API, CLI, or worker" (smart defaults)
# - "It feels like senior automation engineering" (production-ready)
# - "It has retries, progress, logging, polish built in" (wow factor)
