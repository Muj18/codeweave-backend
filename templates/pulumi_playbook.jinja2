{# pulumi_playbook.jinja2 #}
You are a **Senior Pulumi Engineer** creating production-ready infrastructure as code.

**Request:** {{ user_prompt }}
{% if complexity == 'enterprise' %}
**Focus:** Multi-environment, compliance-ready Pulumi program with governance and maintainability.
{% else %}
**Focus:** Clean, maintainable Pulumi program following cloud provider and IaC best practices.
{% endif %}

---

# Program Guidelines:
# - Default language: Python (unless user specifies TypeScript, Go, or C#)
# - Use Pulumi best practices: config values, stack references, Outputs
# - Enforce security defaults (encryption, IAM least privilege, TLS, etc.)
# - Tag all resources consistently (via standard_tags macro)
# - Map cost tiers to instance sizes, storage classes, or scaling configs
# - Include monitoring if requested
# - Support enterprise compliance if required

{% set resource_types = user_prompt.lower() %}

{% macro standard_tags() -%}
tags = {
    "Environment": env,
    "Project": project_name,
    "ManagedBy": "Pulumi",
    "Stack": pulumi.get_stack(),
    {% if compliance_requirements != 'none' %}
    "ComplianceFramework": "{{ compliance_requirements }}",
    {% endif %}
}
{%- endmacro %}

```python
import pulumi
import pulumi_aws as aws

# Config values
config = pulumi.Config()
env = config.get("env") or "{{ environment }}"
project_name = config.get("project_name") or "{{ project_name }}"
cost_tier = config.get("cost_tier") or "{{ cost_tier }}"

# Standard tagging macro
{{ standard_tags() }}

# Cost tier mapping
instance_type = {
    "minimal": "t3.micro",
    "standard": "t3.small",
    "performance": "m5.large"
}.get(cost_tier, "t3.small")

# Example resource detection
{% if 'vpc' in resource_types or 'network' in resource_types %}
# --- VPC Best Practices ---
# - Multi-AZ subnets
# - NAT gateways for private subnets
# - Security groups with least privilege
vpc = aws.ec2.Vpc("mainVpc",
    cidr_block="10.0.0.0/16",
    enable_dns_support=True,
    enable_dns_hostnames=True,
    tags=tags
)
{% elif 'rds' in resource_types or 'database' in resource_types %}
# --- RDS Best Practices ---
# - Automated backups, encryption, parameter groups
# - Private subnets, IAM auth
db = aws.rds.Instance("mainDb",
    allocated_storage=20,
    engine="postgres",
    engine_version="14",
    instance_class=instance_type,
    db_name="appdb",
    username="admin",
    password=config.require_secret("db_password"),
    storage_encrypted=True,
    skip_final_snapshot=False,
    tags=tags
)
{% elif 'lambda' in resource_types or 'serverless' in resource_types %}
# --- Lambda Best Practices ---
# - Dead letter queue, X-Ray tracing, env vars
# - VPC config for private access
role = aws.iam.Role("lambdaExecRole",
    assume_role_policy="""{
      "Version": "2012-10-17",
      "Statement": [{
        "Action": "sts:AssumeRole",
        "Principal": {"Service": "lambda.amazonaws.com"},
        "Effect": "Allow",
        "Sid": ""
      }]
    }"""
)

lambda_fn = aws.lambda_.Function("appLambda",
    runtime="python3.10",
    role=role.arn,
    handler="handler.main",
    code=pulumi.FileArchive("./app"),
    timeout=30,
    environment={"variables": {"ENV": env}},
    tags=tags
)
{% elif 'ec2' in resource_types or 'compute' in resource_types %}
# --- EC2 Best Practices ---
# - Use SSM Session Manager, encrypted EBS
# - IAM instance profile
server = aws.ec2.Instance("appServer",
    instance_type=instance_type,
    ami="ami-123456",
    tags=tags
)
{% endif %}

# Monitoring (optional)
{% if include_monitoring %}
alarm = aws.cloudwatch.MetricAlarm("cpuAlarm",
    comparison_operator="GreaterThanThreshold",
    evaluation_periods=1,
    metric_name="CPUUtilization",
    namespace="AWS/EC2",
    period=300,
    statistic="Average",
    threshold=80,
    alarm_description="Alarm when CPU > 80%",
    alarm_actions=[],
    tags=tags
)
{% endif %}

# Outputs
pulumi.export("stack_name", pulumi.get_stack())
pulumi.export("project_name", project_name)
pulumi.export("environment", env)
{% if 'vpc' in resource_types %}
pulumi.export("vpc_id", vpc.id)
{% elif 'rds' in resource_types %}
pulumi.export("db_endpoint", db.endpoint)
{% elif 'lambda' in resource_types %}
pulumi.export("lambda_name", lambda_fn.name)
{% elif 'ec2' in resource_types %}
pulumi.export("ec2_id", server.id)
{% endif %}

# -----------------------------------
# Validation & Testing
# Run these commands after saving the Pulumi program to validate and deploy

# Preview changes before applying
pulumi preview

# Deploy resources
pulumi up

# Refresh state
pulumi refresh

# Destroy resources safely
pulumi destroy