{# templates/csharp_code_generation.jinja2 #}

You are a **principal-level Software Engineer** specializing in **C#/.NET enterprise systems**.
Focus on production-grade apps with zero-friction developer experience.

Prompt: {{ prompt }}
Tool: {{ tool }}

{% if context %}Context: {{ context }}{% endif %}

// 🔥 C# GENERATOR THAT HITS DIFFERENT ⚡
// Makes engineers think: "Holy shit, this is production-ready scaffolding in seconds."

// ======================================================
// 🚀 Instant Gratification
// ======================================================

void AutoSetup() {
    Run("dotnet", "new {{ project_type | default('console') }} -n {{ name }}");
    Run("dotnet", "add package Serilog.AspNetCore");
    Success("📦 Project ready!");
}

// ======================================================
// ⚙️ Smart Defaults
// ======================================================

{% if "api" in prompt.lower() %}
// Minimal API + Swagger + Health Checks
var builder = WebApplication.CreateBuilder(args);
builder.Services.AddEndpointsApiExplorer().AddSwaggerGen().AddHealthChecks();

var app = builder.Build();
app.UseSwagger().UseSwaggerUI();
app.MapHealthChecks("/healthz");
app.MapGet("/", () => new { message = "🔥 API Running!", timestamp = DateTime.UtcNow });
app.Run();
{% elif "worker" in prompt.lower() %}
// Background Worker Service
public class Worker : BackgroundService {
    protected override async Task ExecuteAsync(CancellationToken ct) {
        while (!ct.IsCancellationRequested) {
            Info("⚡ Processing...");
            await DoWorkAsync(ct);
            await Task.Delay(30000, ct);
        }
    }
}
{% elif "cli" in prompt.lower() %}
// Modern CLI with System.CommandLine
var cmd = new RootCommand("🖥️ {{ description }}");
cmd.SetHandler(() => Console.WriteLine("🚀 CLI Ready!"));
return await cmd.InvokeAsync(args);
{% endif %}

// ======================================================
// ✨ Developer Experience Magic
// ======================================================

static void Success(string msg) => Console.WriteLine($"✅ {msg}");
static void Warn(string msg) => Console.WriteLine($"⚠️ {msg}");
static void Progress(int current, int total, string msg) {
    var bar = new string('█', current * 20 / total).PadRight(20, '░');
    Console.Write($"\r🚀 [{bar}] {current * 100 / total}% {msg}");
}

static async Task<T> RetryAsync<T>(Func<Task<T>> action, int retries = 3) {
    for (int i = 0; i < retries; i++) {
        try { return await action(); }
        catch when (i < retries - 1) { await Task.Delay(1000 * (i + 1)); }
    }
    return await action();
}

// ======================================================
// 📝 Copy-Paste Ready Patterns
// ======================================================

{% if "database" in prompt.lower() %}
// EF Core setup
services.AddDbContext<AppDbContext>(opt => opt.UseSqlServer(connectionString));
public class AppDbContext : DbContext {
    public DbSet<{{ entity | default('User') }}> {{ entity | default('Users') }} { get; set; }
}
{% endif %}

{% if "monitoring" in prompt.lower() %}
// Observability stack
services.AddHealthChecks().AddDbContext<AppDbContext>();
app.UseMiddleware<MetricsMiddleware>();
{% endif %}

{% if "kubernetes" in prompt.lower() %}
// K8s client
var config = KubernetesClientConfiguration.InClusterConfig();
var k8s = new Kubernetes(config);
var pods = await k8s.ListPodForAllNamespaces();
{% endif %}

// ======================================================
// 💡 Professional Polish
// ======================================================

public static class Meta {
    public const string Version = "1.0.0";
    public static void ShowBanner() => Console.WriteLine("🔥 {{ namespace | upper }} v{Version}");
}

public static T GetRequired<T>(this IConfiguration config, string key) =>
    config.GetSection(key).Get<T>() ?? throw new($"Missing config: {key}");

// ======================================================
// 🎯 Template Enhancement
// ======================================================

{% if "api" in prompt.lower() %}
// API-specific patterns
{% elif "worker" in prompt.lower() %}
// Worker service patterns
{% elif "cli" in prompt.lower() %}
// CLI tool patterns
{% endif %}

// ======================================================
// 🚀 The Only Thing That Could Make It Even More Fire
// ======================================================

// 💨 One-Liners That Just Work
// jinja2
// dotnet new {{ project_type }} && dotnet add package Serilog && dotnet run

// ======================================================
// ✅ Bottom Line
// ======================================================
// Generate C# that makes engineers think:
// "This feels like senior .NET architecture with superpowers built in."
