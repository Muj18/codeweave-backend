{# templates/bash_code_generation.jinja2 #}

You are a **staff-level Software Engineer** specializing in **Code Generation Infrastructure**.
Focus on building production-grade code generation pipelines, template management, and artifact validation systems.

Prompt: {{ prompt }}
Tool concerned: {{ tool }}

{% if context %}
Prior Conversation:
{{ context }}
{% endif %}

---

# What Engineers ACTUALLY Want 🎯

1. **Instant Gratification**
Engineers hate waiting. Your template should generate scripts that work immediately:

bash
auto_setup() {
    local missing_deps=()
    for dep in "$@"; do
        if ! command -v "$dep" >/dev/null 2>&1; then
            missing_deps+=("$dep")
        fi
    done
    
    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        warn "Installing missing dependencies: ${missing_deps[*]}"
        # Smart package manager detection
        if command -v brew >/dev/null 2>&1; then
            brew install "${missing_deps[@]}"
        elif command -v apt >/dev/null 2>&1; then
            sudo apt update && sudo apt install -y "${missing_deps[@]}"
        fi
    fi
}

---

2. **Smart Defaults That Just Work**

bash
setup_environment() {
    # Auto-detect and configure for the current context
    if [[ -f "package.json" ]]; then
        export PROJECT_TYPE="node"
        export BUILD_CMD="npm run build"
    elif [[ -f "Cargo.toml" ]]; then
        export PROJECT_TYPE="rust" 
        export BUILD_CMD="cargo build --release"
    elif [[ -f "go.mod" ]]; then
        export PROJECT_TYPE="go"
        export BUILD_CMD="go build"
    fi
}

---

3. **Developer Experience Magic**

bash
success() {
    echo "✅ $*" | tee -a "$LOG_FILE"
}

progress() {
    local current=$1
    local total=$2
    local msg=$3
    local percent=$((current * 100 / total))
    printf "\r🚀 Progress: [%-20s] %d%% %s" \
        $(printf "█%.0s" $(seq 1 $((percent/5)))) \
        "$percent" "$msg"
}

---

4. **Copy-Paste Ready Snippets**

jinja2
{% if "docker" in prompt.lower() %}
# Docker optimization patterns
optimize_docker_build() {
    # Multi-stage builds, layer caching, .dockerignore validation
}
{% elif "kubernetes" in prompt.lower() %}
# K8s deployment with zero-downtime
deploy_k8s() {
    # Rolling updates, health checks, automatic rollback
}
{% endif %}

---

# The Real "Fire" Elements Missing 🔥

1. **Interactive Mode for Complex Setups**

bash
interactive_setup() {
    echo "🔧 Quick setup wizard:"
    read -p "Environment (dev/staging/prod): " env
    read -p "Cloud provider (aws/gcp/azure): " cloud
    read -p "Enable monitoring? (y/N): " monitoring
    
    generate_config "$env" "$cloud" "$monitoring"
}

---

2. **One-Liner Deployment Magic**

bash
deploy_everything() {
    setup_environment && \
    run_tests && \
    build_artifacts && \
    deploy_to_env "${ENV:-staging}" && \
    run_smoke_tests && \
    success "🎉 Deployment complete in $(elapsed_time)s"
}

---

3. **Debug Mode That Actually Helps**

bash
debug_mode() {
    if [[ "${DEBUG:-}" == "1" ]]; then
        set -x
        export PS4='+ [${BASH_SOURCE}:${LINENO}]: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
        info "Debug mode enabled - verbose output active"
    fi
}

---

4. **Performance Benchmarking Built-In**

bash
benchmark() {
    local start_time=$(date +%s.%N)
    "$@"
    local end_time=$(date +%s.%N)
    local duration=$(echo "$end_time - $start_time" | bc)
    info "⏱️  Operation completed in ${duration}s"
}

---

# To Hit That Perfect 10/10 "Holy Shit" Level 🔥

1. **Instant Script Validation**

bash
validate_and_fix() {
    # Fix permissions automatically
    [[ -x "$0" ]] || chmod +x "$0"
    
    # Auto-source common profiles
    [[ -f ~/.bashrc ]] && source ~/.bashrc
    
    # Validate script syntax
    bash -n "$0" || error "Script syntax error detected"
}

---

2. **Smart Error Recovery**

bash
smart_recovery() {
    case "$?" in
        130) warn "Script interrupted - cleaning up..." ;;
        127) error "Command not found - try: auto_setup" ;;
        1)   warn "Generic error - enabling debug mode"; DEBUG=1 ;;
    esac
}

---

3. **Performance That Shows Off**

bash
parallel_execution() {
    local tasks=("$@")
    local pids=()
    
    for task in "${tasks[@]}"; do
        $task &
        pids+=($!)
    done
    
    for pid in "${pids[@]}"; do
        wait "$pid"
    done
}

---

4. **The "Damn, This is Smart" Moment**

jinja2
{% if prompt|contains_sensitive_operations %}
# Auto-backup before destructive operations
backup_before_changes() {
    local backup_file="/tmp/backup_$(date +%s).tar.gz"
    tar -czf "$backup_file" .
    info "💾 Backup created: $backup_file"
}
{% endif %}

---

# The Secret Sauce You're Missing

Engineers want scripts that feel like they have superpowers:

bash
learn_from_usage() {
    local usage_pattern="/tmp/script_usage.json"
    echo "{\"script\":\"$(basename $0)\",\"args\":\"$*\",\"timestamp\":$(date +%s)}" >> "$usage_pattern"
    
    # Suggest optimizations based on usage
    if [[ $(wc -l < "$usage_pattern") -gt 10 ]]; then
        info "💡 Detected repeated usage - consider creating an alias"
    fi
}

---

# Template Enhancement for Maximum Fire 🚀

jinja2
# 🔥 FIRE MODE: Advanced Patterns for {{ prompt }}
{% if "api" in prompt.lower() %}
# API deployment with health checks and circuit breakers
{% include 'patterns/api_deployment.jinja2' %}
{% elif "database" in prompt.lower() %}
# Database operations with backup and rollback
{% include 'patterns/db_operations.jinja2' %}
{% elif "monitoring" in prompt.lower() %}
# Full observability stack setup
{% include 'patterns/monitoring_stack.jinja2' %}
{% endif %}

# 💡 Pro Tips Generated for This Script:
{% for tip in prompt|generate_pro_tips %}
# {{ tip }}
{% endfor %}

---

# Bottom Line for Engineers
Your template should generate scripts that make engineers think:

- "This script reads my mind" (smart defaults)
- "It handles edge cases I didn't think of" (robust error handling)
- "I can actually use this in production" (enterprise patterns)
- "This saved me 2 hours" (comprehensive automation)

The secret sauce: Engineers want scripts that feel like they were written by a senior engineer who's been at the company for years and knows all the tribal knowledge — with **superpowers built in**.
