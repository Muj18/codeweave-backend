{# observability_playbook.jinja2 #}
You are a **Principle level Observability Engineer** designing a production-ready monitoring, logging, and tracing stack.

**Request:** {{ user_prompt }}
{% if complexity == 'enterprise' %}
**Focus:** Multi-cluster observability with Prometheus, Loki, Grafana, OpenTelemetry, and compliance-ready SLOs.
{% else %}
**Focus:** Clean, maintainable monitoring stack with Prometheus and Grafana following CNCF best practices.
{% endif %}

---

{% set stack_components = stack_components | default(['prometheus', 'grafana']) %}
{% set security_level = security_level | default('standard') %}
{% set compliance_frameworks = compliance_frameworks | default(['SOC2']) %}
{% set environment = environment | default('dev') %}
{% set project_name = project_name | default('observability') %}

# -----------------------------------
# Prometheus Deployment (Helm-based)
# -----------------------------------
{% if 'prometheus' in stack_components %}
resource "helm_release" "prometheus" {
  name       = "prometheus"
  repository = "https://prometheus-community.github.io/helm-charts"
  chart      = "kube-prometheus-stack"
  namespace  = "observability"
  version    = "65.0.0"

  values = [yamlencode({
    prometheus = {
      prometheusSpec = {
        retention = "15d"
        serviceMonitorSelectorNilUsesHelmValues = false
      }
    }
    alertmanager = {
      alertmanagerSpec = {
        replicas = {{ environment == "prod" and 3 or 1 }}
      }
    }
  })]
}
{% endif %}

# -----------------------------------
# Grafana Deployment
# -----------------------------------
{% if 'grafana' in stack_components %}
resource "helm_release" "grafana" {
  name       = "grafana"
  repository = "https://grafana.github.io/helm-charts"
  chart      = "grafana"
  namespace  = "observability"
  version    = "7.3.0"

  values = [yamlencode({
    persistence = { enabled = true, size = "10Gi" }
    adminUser   = "admin"
    adminPassword = "changeme"
    service = { type = "ClusterIP" }
  })]
}
{% endif %}

# -----------------------------------
# Loki & Logging
# -----------------------------------
{% if 'loki' in stack_components %}
resource "helm_release" "loki" {
  name       = "loki"
  repository = "https://grafana.github.io/helm-charts"
  chart      = "loki"
  namespace  = "observability"
  version    = "5.40.0"

  values = [yamlencode({
    persistence = { enabled = true, size = "50Gi" }
    resources = { requests = { cpu = "500m", memory = "1Gi" } }
  })]
}
{% endif %}

# -----------------------------------
# OpenTelemetry Collector
# -----------------------------------
{% if 'otel' in stack_components %}
apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: {{ project_name }}-otel
  namespace: observability
spec:
  mode: deployment
  config: |
    receivers:
      otlp:
        protocols:
          grpc:
          http:
    exporters:
      logging:
      jaeger:
        endpoint: jaeger-collector.observability.svc:14250
        tls:
          insecure: true
    service:
      pipelines:
        traces:
          receivers: [otlp]
          exporters: [logging, jaeger]
{% endif %}

# -----------------------------------
# Security & Compliance (Enterprise Mode)
# -----------------------------------
{% if security_level == 'enterprise' %}
---
apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: compliance-pod-monitor
  namespace: observability
spec:
  selector:
    matchLabels:
      compliance: enabled
  podMetricsEndpoints:
  - port: metrics

---
apiVersion: v1
kind: NetworkPolicy
metadata:
  name: observability-netpol
  namespace: observability
spec:
  podSelector: {}
  policyTypes: [Ingress, Egress]
  ingress:
  - from:
    - namespaceSelector: {}
  egress:
  - {}
{% endif %}

# -----------------------------------
# Grafana Dashboard (SLO Example)
# -----------------------------------
# Grafana JSON Dashboard for Availability SLO
# {
#   "dashboard": {
#     "title": "Service SLO Dashboard",
#     "panels": [
#       {
#         "title": "Availability (99.9% Target)",
#         "type": "timeseries",
#         "targets": [
#           { "expr": "1 - (sum(rate(http_requests_total{status=~'5..'}[5m])) / sum(rate(http_requests_total[5m])))" }
#         ]
#       }
#     ]
#   }
# }

# -----------------------------------
# Validation & Testing (run manually)
# kubectl get pods -n observability
# kubectl logs -l app.kubernetes.io/name=prometheus -n observability
# kubectl logs -l app.kubernetes.io/name=grafana -n observability
# kubectl get servicemonitors -A
# kubectl port-forward svc/grafana 3000:80 -n observability
# curl http://localhost:3000
