### Auth & Network — Pro SRE Hands-On

Identity (AWS/Azure/GCP/K8s)
- **Who am I?**
  - AWS: `aws sts get-caller-identity`
  - Azure: `az account show --query user.name`
  - GCP: `gcloud auth list`
- **Permission checks**
  - AWS: `aws iam simulate-principal-policy --policy-source-arn <role_arn> --action-names s3:GetObject`
  - Azure: `az role assignment list --assignee <principalId or UPN>`
  - GCP: `gcloud projects get-iam-policy <PROJECT_ID> --flatten="bindings[].members" --filter="bindings.members:<sa>" --format="table(bindings.role)"`
- **K8s service account ↔ cloud identity**
  - Check IRSA/Workload Identity/Managed Identity wiring:
    - `kubectl describe sa <sa> -n <ns>` (look for IAM/Workload annotations)
    - Inspect pod: `kubectl describe pod <pod> -n <ns>` (env/volume tokens)
  - AWS IRSA: verify annotation `eks.amazonaws.com/role-arn: <role_arn>`

Network Reachability (VPC/VNet/VPC-SC)
- **Basic path test**
  - `curl -I http://<host>:<port>` or `curl -vk https://<host>:<port>/health`
  - `nc -vz <host> <port>` (or `telnet <host> <port>` if nc missing)
- **DNS**
  - `dig +short <fqdn>` / `nslookup <fqdn>`
  - In-cluster: `kubectl exec -it <pod> -- getent hosts <fqdn>`
- **Security controls**
  - AWS: Security Groups, NACLs, Route Tables, NAT GW, VPC Endpoints
    - `aws ec2 describe-security-groups --group-ids <sg>`
    - `aws ec2 describe-route-tables --route-table-ids <rtb>`
    - `aws ec2 describe-nat-gateways --filter Name=state,Values=available`
  - Azure: NSGs, UDRs, NAT Gateway, Private Endpoints
    - `az network nsg rule list --nsg-name <nsg> --resource-group <rg>`
    - `az network route-table route list --resource-group <rg> --route-table-name <rt>`
  - GCP: VPC firewall, routes, Cloud NAT, Private Service Connect
    - `gcloud compute firewall-rules list --filter="network=<vpc>"`
    - `gcloud compute routers nats list --router=<router> --region=<region>`

TLS / Certificates
- Inspect server cert and chain:
  - `echo | openssl s_client -connect <host>:443 -servername <host> | openssl x509 -noout -issuer -subject -dates`
- Common fixes:
  - Ensure correct SAN (hostname), valid chain, non-expired cert, matching cipher policies.
  - For mTLS: verify client cert mounted and trust store present in container.

Time Sync (can break TLS, tokens)
- Check NTP drift:
  - Linux: `chronyc tracking` or `timedatectl status`
  - Container: `kubectl exec <pod> -- date` vs. DB/LB time

Quick Remediations
- **Open egress** for private subnets to required endpoints (NAT/PrivateLink).
- **Tighten/allow SG/NSG** rules for specific ports/IPs only; avoid wide `0.0.0.0/0` in prod.
- **Fix identity mapping** (IRSA/Managed Identity) if tokens fail; re-annotate SA and restart pods.
- **DNS pinning**: if DNS flaky, consider short TTLs and avoid IP hardcoding.
