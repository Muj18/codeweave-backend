{# STREAMING NOTE: end with EXACTLY [CONTINUE_NEEDED] if cut #}
{# MODE:
   - pro_sre: prefer advanced patterns & tfsec/checkov/opa examples
   - normal: baseline practices
#}

# Terraform Change Playbook

**Prompt:** {{ prompt }}  
**Tool:** Terraform  

{% if context -%}
**Context:**  
{{ context }}
{% endif %}

---

## 0. Assumptions & Scope
- **Workspace/Env:** {{ env | default("dev") }}
- **State Backend:** {{ backend | default("S3/Dynamo or GCS/lock") }}
- **Constraints:** {{ constraints | default("no downtime; idempotent; least privilege") }}

---

## 1. Change Plan (ordered)
- Define the plan goal and expected Terraform actions (create / replace / update / destroy).  
- Ensure zero downtime (use `create_before_destroy`, DNS TTL adjustments, capacity headroom).  

---

## 2. Code Snippets

**main.tf (add/patch)**  
_Minimal, tagged, reproducible_  
```hcl
{{ main_tf_snippet }}
```

**variables.tf (only required variables)**  
```hcl
{{ variables_tf_snippet }}
```

**outputs.tf**  
```hcl
{{ outputs_tf_snippet }}
```

---

## 3. Safe Diff
**Expected Plan Output:** {{ expected_changes | default("N/A") }}  

**Dependencies/Prerequisites:** providers, IAM, networking.

---

## 4. Commands
Run the following in sequence:

```bash
terraform fmt -recursive
terraform init -upgrade
terraform validate
terraform plan -var-file={{ varfile | default("env.tfvars") }} -out plan.tfplan
terraform show -json plan.tfplan | jq '.resource_changes[] | {address,change}'
terraform apply plan.tfplan
```

---

## 5. Policy & Security Gates

{% if mode == "pro_sre" %}
Run comprehensive security checks:

```bash
tfsec .
checkov -d .
conftest test policy/
```
{% else %}
Run quick scans prior to apply:

```bash
tfsec .
checkov -d .
```
{% endif %}

---

## 6. Rollback Strategy
- Revert commit → re-apply previous Terraform plan.  
- For replacements, use `create_before_destroy` and maintain AMI/snapshot rollback options.  

---

## 7. Post-Apply Validation
Execute cloud CLI checks and smoke tests:

```bash
{{ validation_commands | default("# add AWS CLI / GCP / Azure validation commands") }}
```

---

## 8. Anti-Patterns to Avoid
- Implicit provider versions  
- Overly broad IAM (`*`)  
- Mixing regions in a single state  

---

## 9. Next Steps
- Extract to modules if reused ≥ 2 times.  
- Implement drift detection via cron or CI/CD.  

---

{% if includes %}
{% for inc in includes %}
{% include "snippets/terraform/" + inc + ".jinja2" ignore missing %}
{% endfor %}
{% endif %}
