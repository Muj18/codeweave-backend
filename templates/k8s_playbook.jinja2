# templates/k8s_playbook.jinja2

You are a **staff-level Kubernetes Engineer** tasked with producing a production-grade **Kubernetes Playbook**.  
The output must:  
- Be written as if reviewed by senior architects and CTOs.  
- Cover **multi-cloud (EKS, AKS, GKE)**, **automation (IaC, Terraform, ArgoCD, GitHub Actions)**, **resilience (HA, multi-AZ, DR, RPO)**, **observability (metrics, logs, tracing, SLOs)**, **security & compliance (IAM, RBAC, least privilege, KMS encryption, PCI, ISO 27001, HIPAA, GDPR)**, **cost efficiency (rightsizing, spot, savings plans)**, **risks**, **runbook**, and **quick wins**.  
- Provide **complete Kubernetes YAML/Terraform snippets**.  
- Use structured markdown with clear sections.  

---

## 1) Executive Summary
- **Prompt:** {{ prompt | default("Design a production-grade Kubernetes cluster.") }}  
- **Tool:** Kubernetes Playbook  
- **Cloud/Runtime:** {{ cloud | default("multi-cloud (AWS/Azure/GCP)") }}  
- **Prior Context:** {{ conversation | default("{}") }}  

This playbook defines **enterprise Kubernetes cluster patterns** for multi-cloud environments.  

---

## 2) Architecture Diagram
{{'```mermaid'}}
graph TD
    Dev[Developer] --> Repo[GitHub]
    Repo --> ArgoCD[GitOps Pipeline]
    ArgoCD --> Cluster[K8s Cluster (EKS/AKS/GKE)]
    Cluster --> Obs[Metrics/Logs/Tracing/SLOs]
    Cluster --> Sec[RBAC/IAM/KMS/Compliance]
    Cluster --> DR[HA / Multi-AZ / DR]
{{'```'}}

---

## 3) Core Architecture
- **Automation**: Terraform + ArgoCD GitOps + GitHub Actions.  
- **Resilience**: HA multi-AZ clusters, DR tested with RPO/RTO.  
- **Security**: IAM roles for service accounts, RBAC, secrets with KMS.  
- **Compliance**: PCI, ISO 27001, HIPAA, GDPR.  
- **Observability**: Metrics, Logs, Tracing, Prometheus, Grafana, OpenTelemetry.  
- **Cost**: rightsizing nodes, spot instances, savings plans.  

---

## 4) Production-Grade Examples

### Terraform EKS Cluster
{{'```hcl'}}
module "eks" {
  source  = "terraform-aws-modules/eks/aws"
  version = "20.0.0"

  cluster_name = "prod-eks"
  cluster_version = "1.29"
  subnet_ids = ["subnet-123", "subnet-456", "subnet-789"]

  enable_irsa = true
  manage_aws_auth = true
}
{{'```'}}

### Kubernetes Deployment
{{'```yaml'}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web
spec:
  replicas: 3
  selector:
    matchLabels:
      app: web
  template:
    metadata:
      labels:
        app: web
    spec:
      containers:
      - name: nginx
        image: nginx:1.25
        ports:
        - containerPort: 80
{{'```'}}

---

## 5) Runbook – Step-by-Step
1. Provision cluster via Terraform.  
2. Bootstrap ArgoCD + GitOps.  
3. Deploy workloads with manifests.  
4. Validate **logs**, **metrics**, and **tracing**.  
5. Audit RBAC + compliance weekly.  

---

## 6) Risks, Pitfalls & Gotchas
| Risk | Mitigation |
|------|------------|
| Pod failures | Probes + auto-healing |
| Secrets exposed | KMS + Vault |
| Cost overruns | Spot + rightsizing |
| Compliance audit gaps | OPA + audit logs |

**Gotchas:**  
- Misconfigured RBAC rules can block deployments.  
- Cluster upgrades may reset default limits if not automated.  

---

## 7) Quick Wins
- Add liveness/readiness probes.  
- Enable cluster autoscaler.  
- Automate KPI dashboard (cost per cluster, uptime).  
- KPI: ≥ 99.9% uptime, 25% cost reduction.  

---

## ✅ End of Template
