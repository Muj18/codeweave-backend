{# templates/javascript_code_generation.jinja2 #}

You are a **staff-level Software Engineer** specializing in **Code Generation Infrastructure**.  
Focus on building production-grade code generation pipelines, template management, and artifact validation systems.

Prompt: {{ prompt }}  
Tool concerned: {{ tool }}

{% if context %}
Prior Conversation:  
{{ context }}
{% endif %}

---

# Context-Aware JavaScript Generation

{% set is_backend = "api" in prompt.lower() or "server" in prompt.lower() or "backend" in prompt.lower() or "express" in prompt.lower() or "fastify" in prompt.lower() %}
{% set is_frontend = "react" in prompt.lower() or "component" in prompt.lower() or "frontend" in prompt.lower() or "ui" in prompt.lower() or "vue" in prompt.lower() %}
{% set is_cli = "cli" in prompt.lower() or "command" in prompt.lower() or "script" in prompt.lower() %}
{% set is_fullstack = "fullstack" in prompt.lower() or "monorepo" in prompt.lower() %}

{% if is_backend %}
# NODE.JS BACKEND TEMPLATE
{% elif is_frontend %}
# REACT/FRONTEND TEMPLATE  
{% elif is_cli %}
# NODE.JS CLI TEMPLATE
{% elif is_fullstack %}
# FULLSTACK MONOREPO TEMPLATE
{% else %}
# GENERAL JAVASCRIPT TEMPLATE
{% endif %}

---

# 🚨 Core Problems We Fixed
- **No more context confusion**: Node.js, React, CLI, and Fullstack are now separated.  
- **Ecosystem awareness added**: package.json detection, TypeScript, bundlers, testing.  
- **Framework detection improved**: Express, Fastify, React, Vue, CLI tools each get their own scaffolding.  

---

{% if is_backend %}
# Backend Engineering Fire 🔥

## Auto-Setup for Node.js APIs
```javascript
const fs = require('fs');
const { execSync } = require('child_process');

function autoSetup() {
  if (!fs.existsSync('package.json')) {
    execSync('npm init -y', { stdio: 'inherit' });
    console.log('📦 Initialized package.json');
  }
  // Default to Express, override if Fastify/Koa
  if (prompt.includes('fastify')) execSync('npm install fastify @fastify/cors', { stdio: 'inherit' });
  else execSync('npm install express cors helmet', { stdio: 'inherit' });
}
```

## Production API Patterns
```javascript
const express = require('express');
const helmet = require('helmet');
const cors = require('cors');

const app = express();
app.use(helmet());
app.use(cors());
app.use(express.json());

app.get('/healthz', (req, res) => res.json({ status: 'ok', uptime: process.uptime() }));

app.use((err, req, res, next) => {
  console.error('❌ API Error:', err.message);
  res.status(500).json({ error: 'Internal Server Error' });
});

app.listen(3000, () => console.log('✅ API server running on :3000'));
```
{% elif is_frontend %}
# Frontend Engineering Fire 🔥

## Modern React Component Patterns
```javascript
import React, { useState, useEffect, useCallback } from 'react';

function {{ prompt|replace(" ", "")|title }}Component() {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const fetchData = useCallback(async () => {
    try {
      setLoading(true);
      const res = await fetch('/api/data');
      setData(await res.json());
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => { fetchData(); }, [fetchData]);

  if (loading) return <div>🔄 Loading...</div>;
  if (error) return <div>❌ {error}</div>;
  return <pre>{JSON.stringify(data, null, 2)}</pre>;
}

export default {{ prompt|replace(" ", "")|title }}Component;
```

## Ecosystem Awareness
- Detects `vite.config.js`, `webpack.config.js`, or CRA  
- Auto-configures testing with Jest/Vitest  
- TypeScript integration via `tsconfig.json`  
{% elif is_cli %}
# CLI Engineering Fire 🔥

```javascript
#!/usr/bin/env node
const { Command } = require('commander');
const program = new Command();

program
  .name('{{ prompt|replace(" ", "-") }}')
  .description('CLI tool for {{ prompt }}')
  .version('1.0.0');

program.command('run')
  .option('-v, --verbose', 'verbose output')
  .action((opts) => {
    if (opts.verbose) console.log('🔍 Verbose mode enabled');
    console.log('🚀 Running {{ prompt }}...');
  });

program.parse();
```

## CLI Essentials
- Auto-install `commander`, `chalk`, `ora`, `inquirer`  
- Smart error recovery with retries  
- Usage tracking for repeated CLI runs  
{% elif is_fullstack %}
# Fullstack Monorepo Engineering Fire 🔥

```
{{ prompt|replace(" ", "-") }}/
├── package.json
├── apps/
│   ├── backend/      # Express/Fastify app
│   └── frontend/     # React/Vue app
├── packages/
│   ├── shared-types/ # Shared TS types
│   └── utils/        # Shared utilities
└── tsconfig.base.json
```

## Monorepo Essentials
- Workspace detection (`pnpm`, `yarn`, `npm workspaces`)  
- Shared type definitions across apps  
- Auto API client generation for frontend from backend OpenAPI spec  
{% else %}
# General JavaScript Engineering Fire 🔥

```javascript
function detectEnvironment() {
  const isNode = typeof process !== 'undefined' && process.release?.name === 'node';
  const isBrowser = typeof window !== 'undefined';
  return { isNode, isBrowser };
}
```
{% endif %}

---

# Universal JavaScript Utilities 🛠️

```javascript
async function retryWithBackoff(fn, attempts = 5) {
  let delay = 1000;
  for (let i = 1; i <= attempts; i++) {
    try { return await fn(); }
    catch (err) {
      if (i === attempts) throw err;
      console.warn(`⚠️ Retry ${i} failed, waiting ${delay}ms`);
      await new Promise(r => setTimeout(r, delay));
      delay *= 2;
    }
  }
}
```

```javascript
function benchmark(fn, label = 'operation') {
  return async (...args) => {
    const start = Date.now();
    const result = await fn(...args);
    console.log(`⏱️ ${label} took ${Date.now() - start}ms`);
    return result;
  };
}
```

---

# Recommended Template Architecture 📁

```
templates/javascript/
├── node_api.jinja2        # Pure Node.js server patterns
├── react_app.jinja2       # React scaffolding
├── node_cli.jinja2        # CLI tools with Commander.js
├── vue_component.jinja2   # Vue patterns
└── fullstack.jinja2       # Monorepo setup
```

---

# Bottom Line for Engineers
This template now delivers:  
- **Context separation** (backend, frontend, CLI, fullstack, general)  
- **Deep ecosystem awareness** (package.json, bundlers, TypeScript, Jest/Vitest)  
- **Professional patterns** (Express/Fastify, React hooks, CLI with Commander, monorepos)  
- **Universal utilities** (retry, benchmark, error handling, usage tracking)  

✅ Engineers will think: *“This template actually understands how I build in JS — and it feels production-ready.”*  